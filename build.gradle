buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
        mavenCentral()
        maven {
            name 'FancyGradle'
            url 'https://gitlab.com/api/v4/projects/26758973/packages/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.2-0+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'wtf.gofancy.fancygradle'



fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}

group = 'io.github.citrushappy.citrusthings'
version = '1.0'

java {
    archivesBaseName = 'citrusthings'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':'1.12.2-14.23.5.2847'
        duplicatesStrategy DuplicatesStrategy.WARN
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        duplicatesStrategy DuplicatesStrategy.WARN
    }
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url = 'https://repo.spongepowered.org/maven' }
}

configurations {
    shade
    compile.extendsFrom shade
}

mixin {
    // Refmaps for each SourceSet
    add sourceSets.main, "mixins.citrusthings.refmap.json"

    // Configs to add to runs and jars
    config 'mixins.citrusthings.json'
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
    implementation fg.deobf('software.bernie.geckolib:forge-1.12.2-geckolib:3.0.21')

    //implementation fg.deobf('noppes.npcs:CustomNPCs:1.12.2')



    shade("org.spongepowered:mixin:0.8") {
        exclude module: "commons-io"
        exclude module: "guava"
        exclude module: "gson"
        exclude module: "launchwrapper"
    }

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

    compileOnly("org.spongepowered:spongeforge:1.12.2-2838-7.3.0:dev") {
        transitive = true
    }
}

//need to shade mixins in order to get it working

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes "Specification-Title"     : mod_id
        attributes "Specification-Vendor"    : "citrushappy"
        attributes "Specification-Version"   : "1"
        attributes "Implementation-Title"    : project.name
        attributes "Implementation-Version"  : project.jar.archiveVersion
        attributes "Implementation-Vendor"   : "citrushappy"
        attributes "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
    destinationDirectory.set(file("$rootDir/generated_libs"))
}



jar.finalizedBy('reobfJar')
//jar.finalizedBy('reobfShadowJar')
